<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<PROTEIN_COMPLEXES - APOC PROCEDURE - START>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

CALL apoc.export.json.query(
"Match (complexInteractorN:GraphInteractor)-[complexInteractorR:interactor]-(complexParticipantN:GraphModelledParticipant)-[complexParticipantR:IC_PARTICIPANT]-(complex:GraphComplex) WHERE EXISTS(complexInteractorN.uniprotName)
WITH  COLLECT(distinct complexInteractorN) as complexInteractors
UNWIND complexInteractors as complexInteractor
MATCH  (complexInteractor)-[complexInteractorR:interactor]-(complexParticipantN:GraphModelledParticipant)-[complexParticipantR:IC_PARTICIPANT]-(complex:GraphComplex),(complex)-[complexAcXrefR:complexAcXref]-(complexAcXrefN:GraphXref)
RETURN complexInteractor.uniprotName as interactor_uniprot_name, COLLECT (distinct complexAcXrefN.identifier) as complex_acs
ORDER BY complexInteractor.uniprotName",
"OPEN_TARGETS/protein_complexes.json",
null)

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<PROTEIN_COMPLEXES - APOC PROCEDURE - END>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<INTERACTOR_PAIR_INTERACTIONS - APOC PROCEDURE - START>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

CALL apoc.export.json.query(
"MATCH (typeAN:GraphCvTerm)<-[:interactorType]-(interactorAN:GraphInteractor)<-[:interactors]-(interaction:GraphBinaryInteractionEvidence)-[:interactors]->(interactorBN:GraphInteractor)-[:interactorType]->(typeBN:GraphCvTerm)
WHERE  ID(interactorAN)<ID(interactorBN)
       AND (EXISTS(interactorAN.uniprotName)
                  OR typeAN.mIIdentifier IN ['MI:0320','MI:0321','MI:0322','MI:0323','MI:2190','MI:0324','MI:2204','MI:0679','MI:0608','MI:0611','MI:0610','MI:0609','MI_0325'])
       AND (EXISTS(interactorBN.uniprotName)
                  OR typeBN.mIIdentifier IN ['MI:0320','MI:0321','MI:0322','MI:0323','MI:2190','MI:0324','MI:2204','MI:0679','MI:0608','MI:0611','MI:0610','MI:0609','MI_0325'])

MATCH (interaction)-[identifiersR:identifiers]-(identifiersN:GraphXref)-[sourceR:database]-(sourceN:GraphCvTerm) WHERE sourceN.shortName IN ['reactome','signor','intact']

WITH COLLECT(distinct interaction) as interactionColl,interactorAN,interactorBN,sourceN,identifiersN
UNWIND interactionColl as interactionN

OPTIONAL MATCH (interactionN)-[:BIE_PARTICIPANTA]-(entityAN:GraphEntity)
OPTIONAL MATCH (interactionN)-[:BIE_PARTICIPANTB]-(entityBN:GraphEntity)

OPTIONAL MATCH (entityAN)-[identificationMethodsAR:identificationMethods]->(participantIdentificationMethodAN:GraphCvTerm)


WITH interactionN,
     entityAN,
     entityBN,
     interactorAN,
     interactorBN,
     sourceN,
     identifiersN,
     COLLECT(
             {short_name:participantIdentificationMethodAN.shortName,
              mi_identifier:participantIdentificationMethodAN.mIIdentifier}) as participantIdentificationMethodAColl

OPTIONAL MATCH (entityBN)-[identificationMethodsBR:identificationMethods]->(participantIdentificationMethodBN:GraphCvTerm)

WITH interactionN,
     entityAN,
     entityBN,
     interactorAN,
     interactorBN,
     sourceN,
     identifiersN,
     participantIdentificationMethodAColl,
     COLLECT(
             {short_name:participantIdentificationMethodBN.shortName,
              mi_identifier:participantIdentificationMethodBN.mIIdentifier}) as participantIdentificationMethodBColl

OPTIONAL MATCH (interactorAN)-[:preferredIdentifier]->(identifierAN:GraphXref)-[:database]->(identifierDatabaseAN:GraphCvTerm)
OPTIONAL MATCH (interactorBN)-[:preferredIdentifier]->(identifierBN:GraphXref)-[:database]->(identifierDatabaseBN:GraphCvTerm)
OPTIONAL MATCH (interactorAN)-[:organism]->(organismAN:GraphOrganism)
OPTIONAL MATCH (interactorBN)-[:organism]->(organismBN:GraphOrganism)

OPTIONAL MATCH (entityAN)-[:biologicalRole]-(biologicalRoleAN:GraphCvTerm)
OPTIONAL MATCH (entityBN)-[:biologicalRole]-(biologicalRoleBN:GraphCvTerm)

OPTIONAL MATCH (interactionN)-[clusteredInteractionR:interactions]-(clusteredInteractionN:GraphClusteredInteraction)

OPTIONAL MATCH (interactionN)-[interactiontypeR:interactionType]-(interactiontypeN:GraphCvTerm)

OPTIONAL MATCH (interactionN)-[experimentR:experiment]-(experimentN:GraphExperiment)-[interactionDetectionMethodR:interactionDetectionMethod]-(interactionDetectionMethodN:GraphCvTerm)

OPTIONAL MATCH (experimentN)-[hostOrganismR:hostOrganism]-(hostOrganismN:GraphOrganism)

OPTIONAL MATCH (experimentN)-[publicationR:PUB_EXP]-(publicationN:GraphPublication)-[pubmedIdXrefR:pubmedId]-(pubmedIdXrefN:GraphXref)

OPTIONAL MATCH (interactionN)-[complexExpansionR:complexExpansion]-(complexExpansionN:GraphCvTerm)

OPTIONAL MATCH (entityAN)-[identificationMethodsAR:identificationMethods]->(participantIdentificationMethodAN:GraphCvTerm)
OPTIONAL MATCH (entityBN)-[identificationMethodsBR:identificationMethods]->(participantIdentificationMethodBN:GraphCvTerm)

WITH
      {
         id:identifierAN.identifier,
         id_source: identifierDatabaseAN.shortName,
         organism: {
             scientific_name: organismAN.scientificName,
             taxon_id: organismAN.taxId,
             mnemonic: organismAN.commonName
            },
        biological_role: biologicalRoleAN.shortName
        } as interactorA,
        {
         id:identifierBN.identifier,
         id_source: identifierDatabaseBN.shortName,
         organism: {
             scientific_name: organismBN.scientificName,
             taxon_id: organismBN.taxId,
             mnemonic: organismBN.commonName
            },
        biological_role: biologicalRoleBN.shortName
        } as interactorB,
        {
        source_database:sourceN.shortName,
        database_version:CASE sourceN.shortName
                            WHEN 'reactome' THEN '73'
                            WHEN 'signor' THEN 'Not Available'
                            ELSE '234' END
        } as source_info,
        clusteredInteractionN.miscore as mi_score,
        COLLECT(distinct
               {interaction_identifier: CASE sourceN.shortName
                                        WHEN 'intact'
                                        THEN interactionN.ac
                                        ELSE identifiersN.identifier END,
                interaction_type_short_name: interactiontypeN.shortName,
                interaction_type_mi_identifier: interactiontypeN.mIIdentifier,
                interaction_detection_method_short_name: interactionDetectionMethodN.shortName,
                interaction_detection_method_mi_identifier: interactionDetectionMethodN.mIIdentifier,
                host_organism_scientific_name: hostOrganismN.scientificName,
                host_organism_tax_id: hostOrganismN.taxId,
                participant_detection_method_A:participantIdentificationMethodAColl,
                participant_detection_method_B:participantIdentificationMethodBColl,
                pubmed_id:pubmedIdXrefN.identifier,
                expansion_method_short_name: complexExpansionN.shortName,
                expansion_method_mi_identifier: complexExpansionN.mIIdentifier
               } )  as interaction_evidences


 RETURN interactorA,interactorB,source_info,
               {interaction_score: mi_score,
                causal_interaction:null,
                evidence:interaction_evidences
               } as interaction

ORDER BY interactorA.id

UNION

MATCH (typeAN:GraphCvTerm)<-[:interactorType]-(interactorAN:GraphInteractor)<-[:interactorA]-(interaction:GraphBinaryInteractionEvidence)-[:interactorB]->(interactorBN:GraphInteractor)
WHERE  (ID(interactorAN)=ID(interactorBN))
       AND (EXISTS(interactorAN.uniprotName)
                  OR typeAN.mIIdentifier IN ['MI:0320','MI:0321','MI:0322','MI:0323','MI:2190','MI:0324','MI:2204','MI:0679','MI:0608','MI:0611','MI:0610','MI:0609','MI_0325'])

MATCH (interaction)-[identifiersR:identifiers]-(identifiersN:GraphXref)-[sourceR:database]-(sourceN:GraphCvTerm) WHERE sourceN.shortName IN ['reactome','signor','intact']

WITH COLLECT(distinct interaction) as interactionColl,interactorAN,interactorBN,sourceN,identifiersN
UNWIND interactionColl as interactionN

OPTIONAL MATCH (interactionN)-[:BIE_PARTICIPANTA]-(entityAN:GraphEntity)
OPTIONAL MATCH (interactionN)-[:BIE_PARTICIPANTB]-(entityBN:GraphEntity)

OPTIONAL MATCH (entityAN)-[identificationMethodsAR:identificationMethods]->(participantIdentificationMethodAN:GraphCvTerm)


WITH interactionN,
     entityAN,
     entityBN,
     interactorAN,
     interactorBN,
     sourceN,
     identifiersN,
     COLLECT(
             {short_name:participantIdentificationMethodAN.shortName,
              mi_identifier:participantIdentificationMethodAN.mIIdentifier}) as participantIdentificationMethodAColl

OPTIONAL MATCH (entityBN)-[identificationMethodsBR:identificationMethods]->(participantIdentificationMethodBN:GraphCvTerm)

WITH interactionN,
     entityAN,
     entityBN,
     interactorAN,
     interactorBN,
     sourceN,
     identifiersN,
     participantIdentificationMethodAColl,
     COLLECT(
             {short_name:participantIdentificationMethodBN.shortName,
              mi_identifier:participantIdentificationMethodBN.mIIdentifier}) as participantIdentificationMethodBColl

OPTIONAL MATCH (interactorAN)-[:preferredIdentifier]->(identifierAN:GraphXref)-[:database]->(identifierDatabaseAN:GraphCvTerm)
OPTIONAL MATCH (interactorBN)-[:preferredIdentifier]->(identifierBN:GraphXref)-[:database]->(identifierDatabaseBN:GraphCvTerm)
OPTIONAL MATCH (interactorAN)-[:organism]->(organismAN:GraphOrganism)
OPTIONAL MATCH (interactorBN)-[:organism]->(organismBN:GraphOrganism)

OPTIONAL MATCH (entityAN)-[:biologicalRole]-(biologicalRoleAN:GraphCvTerm)
OPTIONAL MATCH (entityBN)-[:biologicalRole]-(biologicalRoleBN:GraphCvTerm)

OPTIONAL MATCH (interactionN)-[clusteredInteractionR:interactions]-(clusteredInteractionN:GraphClusteredInteraction)

OPTIONAL MATCH (interactionN)-[interactiontypeR:interactionType]-(interactiontypeN:GraphCvTerm)

OPTIONAL MATCH (interactionN)-[experimentR:experiment]-(experimentN:GraphExperiment)-[interactionDetectionMethodR:interactionDetectionMethod]-(interactionDetectionMethodN:GraphCvTerm)

OPTIONAL MATCH (experimentN)-[hostOrganismR:hostOrganism]-(hostOrganismN:GraphOrganism)

OPTIONAL MATCH (experimentN)-[publicationR:PUB_EXP]-(publicationN:GraphPublication)-[pubmedIdXrefR:pubmedId]-(pubmedIdXrefN:GraphXref)

OPTIONAL MATCH (interactionN)-[complexExpansionR:complexExpansion]-(complexExpansionN:GraphCvTerm)

OPTIONAL MATCH (entityAN)-[identificationMethodsAR:identificationMethods]->(participantIdentificationMethodAN:GraphCvTerm)
OPTIONAL MATCH (entityBN)-[identificationMethodsBR:identificationMethods]->(participantIdentificationMethodBN:GraphCvTerm)

WITH
      {
         id:identifierAN.identifier,
         id_source: identifierDatabaseAN.shortName,
         organism: {
             scientific_name: organismAN.scientificName,
             taxon_id: organismAN.taxId,
             mnemonic: organismAN.commonName
            },
        biological_role: biologicalRoleAN.shortName
        } as interactorA,
        {
         id:identifierBN.identifier,
         id_source: identifierDatabaseBN.shortName,
         organism: {
             scientific_name: organismBN.scientificName,
             taxon_id: organismBN.taxId,
             mnemonic: organismBN.commonName
            },
        biological_role: biologicalRoleBN.shortName
        } as interactorB,
        {
        source_database:sourceN.shortName,
        database_version:CASE sourceN.shortName
                            WHEN 'reactome' THEN '73'
                            WHEN 'signor' THEN 'Not Available'
                            ELSE '234' END
        } as source_info,
        clusteredInteractionN.miscore as mi_score,
        COLLECT(distinct
               {interaction_identifier: CASE sourceN.shortName
                                        WHEN 'intact'
                                        THEN interactionN.ac
                                        ELSE identifiersN.identifier END,
                interaction_type_short_name: interactiontypeN.shortName,
                interaction_type_mi_identifier: interactiontypeN.mIIdentifier,
                interaction_detection_method_short_name: interactionDetectionMethodN.shortName,
                interaction_detection_method_mi_identifier: interactionDetectionMethodN.mIIdentifier,
                host_organism_scientific_name: hostOrganismN.scientificName,
                host_organism_tax_id: hostOrganismN.taxId,
                participant_detection_method_A:participantIdentificationMethodAColl,
                participant_detection_method_B:participantIdentificationMethodBColl,
                pubmed_id:pubmedIdXrefN.identifier,
                expansion_method_short_name: complexExpansionN.shortName,
                expansion_method_mi_identifier: complexExpansionN.mIIdentifier
               } )  as interaction_evidences


 RETURN interactorA,interactorB,source_info,
               {interaction_score: mi_score,
                causal_interaction:null,
                evidence:interaction_evidences
               } as interaction

ORDER BY interactorA.id

UNION

MATCH (typeAN:GraphCvTerm)<-[:interactorType]-(interactorAN:GraphInteractor)-[:interactorA]-(interaction:GraphBinaryInteractionEvidence)
WHERE  (NOT (interaction)-[:interactorB]-(:GraphInteractor))
       AND (EXISTS(interactorAN.uniprotName)
                  OR typeAN.mIIdentifier IN ['MI:0320','MI:0321','MI:0322','MI:0323','MI:2190','MI:0324','MI:2204','MI:0679','MI:0608','MI:0611','MI:0610','MI:0609','MI_0325'])

MATCH (interaction)-[identifiersR:identifiers]-(identifiersN:GraphXref)-[sourceR:database]-(sourceN:GraphCvTerm) WHERE sourceN.shortName IN ['reactome','signor','intact']

WITH COLLECT(distinct interaction) as interactionColl,interactorAN,sourceN,identifiersN
UNWIND interactionColl as interactionN

OPTIONAL MATCH (interactionN)-[:BIE_PARTICIPANTA]-(entityAN:GraphEntity)

OPTIONAL MATCH (entityAN)-[identificationMethodsAR:identificationMethods]->(participantIdentificationMethodAN:GraphCvTerm)


WITH interactionN,
     entityAN,
     interactorAN,
     sourceN,
     identifiersN,
     COLLECT(
             {short_name:participantIdentificationMethodAN.shortName,
              mi_identifier:participantIdentificationMethodAN.mIIdentifier}) as participantIdentificationMethodAColl

OPTIONAL MATCH (interactorAN)-[:preferredIdentifier]->(identifierAN:GraphXref)-[:database]->(identifierDatabaseAN:GraphCvTerm)
OPTIONAL MATCH (interactorAN)-[:organism]->(organismAN:GraphOrganism)

OPTIONAL MATCH (entityAN)-[:biologicalRole]-(biologicalRoleAN:GraphCvTerm)

OPTIONAL MATCH (interactionN)-[clusteredInteractionR:interactions]-(clusteredInteractionN:GraphClusteredInteraction)

OPTIONAL MATCH (interactionN)-[interactiontypeR:interactionType]-(interactiontypeN:GraphCvTerm)

OPTIONAL MATCH (interactionN)-[experimentR:experiment]-(experimentN:GraphExperiment)-[interactionDetectionMethodR:interactionDetectionMethod]-(interactionDetectionMethodN:GraphCvTerm)

OPTIONAL MATCH (experimentN)-[hostOrganismR:hostOrganism]-(hostOrganismN:GraphOrganism)

OPTIONAL MATCH (experimentN)-[publicationR:PUB_EXP]-(publicationN:GraphPublication)-[pubmedIdXrefR:pubmedId]-(pubmedIdXrefN:GraphXref)

OPTIONAL MATCH (interactionN)-[complexExpansionR:complexExpansion]-(complexExpansionN:GraphCvTerm)

OPTIONAL MATCH (entityAN)-[identificationMethodsAR:identificationMethods]->(participantIdentificationMethodAN:GraphCvTerm)

WITH
      {
         id:identifierAN.identifier,
         id_source: identifierDatabaseAN.shortName,
         organism: {
             scientific_name: organismAN.scientificName,
             taxon_id: organismAN.taxId,
             mnemonic: organismAN.commonName
            },
        biological_role: biologicalRoleAN.shortName
        } as interactorA,
        null as interactorB,
        {
        source_database:sourceN.shortName,
        database_version:CASE sourceN.shortName
                            WHEN 'reactome' THEN '73'
                            WHEN 'signor' THEN 'Not Available'
                            ELSE '234' END
        } as source_info,
        clusteredInteractionN.miscore as mi_score,
        COLLECT(distinct
               {interaction_identifier: CASE sourceN.shortName
                                        WHEN 'intact'
                                        THEN interactionN.ac
                                        ELSE identifiersN.identifier END,
                interaction_type_short_name: interactiontypeN.shortName,
                interaction_type_mi_identifier: interactiontypeN.mIIdentifier,
                interaction_detection_method_short_name: interactionDetectionMethodN.shortName,
                interaction_detection_method_mi_identifier: interactionDetectionMethodN.mIIdentifier,
                host_organism_scientific_name: hostOrganismN.scientificName,
                host_organism_tax_id: hostOrganismN.taxId,
                participant_detection_method_A:participantIdentificationMethodAColl,
                participant_detection_method_B:null,
                pubmed_id:pubmedIdXrefN.identifier,
                expansion_method_short_name: complexExpansionN.shortName,
                expansion_method_mi_identifier: complexExpansionN.mIIdentifier
               } )  as interaction_evidences


 RETURN interactorA,interactorB,source_info,
               {interaction_score: mi_score,
                causal_interaction:null,
                evidence:interaction_evidences
               } as interaction

ORDER BY interactorA.id

",
"OPEN_TARGETS/interactor_pair_interactions.json",
null)

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<PROTEIN_PAIR_INTERACTIONS - APOC PROCEDURE - END>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>